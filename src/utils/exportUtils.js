import { jsPDF } from 'jspdf';
import icon from './images/icon.png';

export const exportToPDF = (filteredLogs, selectedCategory) => {
    const doc = new jsPDF();

    // Set background color for dark mode
    doc.setFillColor(18, 18, 18);
    doc.rect(0, 0, doc.internal.pageSize.getWidth(), doc.internal.pageSize.getHeight(), 'F');

    // Add the icon on the left
    const iconWidth = 26;
    const iconHeight = 26;
    doc.addImage(icon, 'PNG', 10, 10, iconWidth, iconHeight);

    // Title next to the icon
    doc.setFontSize(24);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(255, 255, 255);
    const titleX =  130; // Position the title to the right of the icon
    doc.text('Activity Logger', titleX, 30);

    // Subtitle
    doc.setFontSize(14);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(255, 255, 255);
    doc.text(`Category: ${selectedCategory}`, doc.internal.pageSize.getWidth() / 2, 50, { align: 'center' });

    // Add a horizontal line
    doc.setDrawColor(255, 255, 255);
    doc.line(10, 55, doc.internal.pageSize.getWidth() - 10, 55);

    // Log entries
    let yPosition = 65;

    if (filteredLogs.length === 0) {
        doc.setTextColor(255, 255, 255);
        doc.setFontSize(12);
        doc.text('No logs available to display.', 10, yPosition);
    } else {
        filteredLogs.forEach((log) => {
            const logText = `-> ${log.log}  ~   ${log.date}`;
            const pageWidth = doc.internal.pageSize.getWidth();
            const categoryX = pageWidth - 10 - doc.getTextWidth(log.category);

            // Log color
            doc.setTextColor(255, 181, 46);
            doc.text(logText, 10, yPosition);

            // Category color
            doc.setTextColor(0, 255, 255);
            doc.text(log.category, categoryX, yPosition);

            // Date color
            doc.setTextColor(255, 255, 255);
            yPosition += 8; // Increase spacing between log entries
        });
    }

    // Footer
    doc.setFontSize(10);
    doc.setTextColor(255, 255, 255);
    doc.text('Generated by Activity Logger', doc.internal.pageSize.getWidth() - 10, doc.internal.pageSize.getHeight() - 10, { align: 'right' });

    doc.save('logs.pdf');
};





export const exportLogs = (logs) => {
    const jsonLogs = JSON.stringify(logs);
    const blob = new Blob([jsonLogs], { type: 'application/json' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'logs.json';
    link.click();
};

export const importLogs = (event, setLogs, logs) => {
    const file = event.target.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
            const importedLogs = JSON.parse(e.target.result);
            const updatedLogs = [...importedLogs, ...logs]; // Append imported logs to existing logs
            setLogs(updatedLogs);
            localStorage.setItem('logs', JSON.stringify(updatedLogs));
        };
        reader.readAsText(file);
    }
};
